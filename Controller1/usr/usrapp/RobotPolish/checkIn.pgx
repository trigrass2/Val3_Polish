<?xml version="1.0" encoding="utf-8" ?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2" >
  <Program name="checkIn" access="private" >
    <Locals>
      <Local name="l_jCurrent" type="jointRx" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  while !bExit
    //UPS信号检测：
    //正常情况下diB_0_UPS信号为true；当工厂断电时,diB_0_UPS信号为false；
    //工厂断电后的异常处理
    if dioGet(io:diB_0_UPS)==0
      call logandpopMsg(sErrorMsg[0],bRefreshMsg[0])
      if read:bCycle
        call alarm_action()
      endIf
      disablePower()
    else
      bRefreshMsg[0]=true
    endIf
    //    //转台故障检测：
    //    //转台相关信号说明：doB_9_tableOn信号用于控制转台启动、停止;doB_0_speed……doB_5_speed等6个信号共同控制转台转速；
    //    //当转台正常转动时给出信号diB_2_tableOn为true;转台没有专门的报警信号,因此通过如下程序进行转台监测
    //    //
    //    if dioGet(io:doB_9_tableOn)==1 and (dioGet(io:doB_0_speed)==1 or dioGet(io:doB_1_speed)==1 or dioGet(io:doB_2_speed)==1 or dioGet(io:doB_3_speed)==1 or dioGet(io:doB_4_speed)==1 or dioGet(io:doB_5_speed)==1)
    //      bTableAlm=!watch(dioGet(io:diB_2_tableOn)==1,2)
    //      if !bTableAlm
    //        bRefreshMsg[1]=true
    //      else
    //        call logandpopMsg(sErrorMsg[1],bRefreshMsg[1])
    //        if read:bCycle
    //          call alarm_action()
    //        endIf
    //      endIf
    //    else
    //      bTableAlm=false
    //    endIf
    //    //工具报警信号检测：
    //    if dioGet(io:diB_3_toolAlm)==1
    //      call logandpopMsg(sErrorMsg[2],bRefreshMsg[2])
    //      if read:bCycle
    //        call alarm_action()
    //      endIf
    //    else
    //      bRefreshMsg[2]=true
    //    endIf
    //ATI通讯状态检测：
    //当控制器与ATI正常通讯时,变量ati:nStatus值等于0,否则通讯不正常
    if ati:nStatus!=0
      call logandpopMsg(sErrorMsg[3],bRefreshMsg[3])
      if read:bCycle
        call alarm_action()
      endIf
      if workingMode()==4
        disablePower()
      endIf
    else
      bRefreshMsg[3]=true
    endIf
    //传感器力/扭矩上限检测
    //需要根据测试结果设置力及力矩上限
    //    if ati:nStatus==0 and (abs(ati:nForce[0])>nLimitAti[0] or abs(ati:nForce[1])>nLimitAti[1] or abs(ati:nForce[2])>nLimitAti[2] or abs(ati:nForce[3])>nLimitAti[3] or abs(ati:nForce[4])>nLimitAti[4] or abs(ati:nForce[5])>nLimitAti[5])
    //      bForceError=true
    //      call logandpopMsg(sErrorMsg[4],bRefreshMsg[4])
    //      if read:bCycle
    //        call alarm_action()
    //      endIf
    //    else
    //      bForceError=false
    //      bRefreshMsg[4]=true
    //    endIf
    //急停处理
    if esStatus()==2
      call logandpopMsg(sErrorMsg[5],bRefreshMsg[5])
      call prd_action("急停处理")
    else
      bRefreshMsg[5]=true
    endIf
    delay(0)
  endWhile
end]]></Code>
  </Program>
</Programs>